{"version":3,"sources":["components/UI/Card.js","components/Expenses/ExpenseFilter.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpensesFilter","value","selected","onChange","event","onChangeFilter","target","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","title","amount","ExpensesList","item","length","map","expense","index","ChartBar","barFillUp","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoint","expenses","getMonth","Expenses","useState","filteredYear","setFilteredYear","filteredExpenses","filter","toString","selectedYear","ExpenseForm","enteredTitle","setTitle","enteredAmount","setAmount","enteredDate","setDate","onSubmit","preventDefault","alert","expenseData","Date","onSaveData","console","log","type","min","step","onClick","cancelEditing","NewExpense","currentState","newState","enteredData","id","random","expensePointer","dummy_data","App","currentExpensesData","newExpensesData","previousExpenses","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b7f414a.chunk.js","sourcesContent":["import './Card.css';\r\n\r\nfunction Card(props) {\r\n    // Children is a reserved key name \r\n    // The value of Props will always be the content between the open and close tags of custom tags\r\n    const classes = 'card ' + props.className;\r\n    return <div className={classes}>{props.children}</div>\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport '../Expenses/ExpenseFilter.css';\r\n\r\nconst ExpensesFilter = (props) => {\r\n\r\n    const yearChange = (event) => {\r\n      props.onChangeFilter(event.target.value);\r\n    }\r\n    \r\n  return (\r\n    <div className='expenses-filter'>\r\n      <div className='expenses-filter__control'>\r\n        <label>Filter by year</label>\r\n        <select value={props.selected} onChange={yearChange}>\r\n          <option value='2022'>2022</option>\r\n          <option value='2021'>2021</option>\r\n          <option value='2020'>2020</option>\r\n          <option value='2019'>2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;","import './ExpenseDate.css';\r\n\r\nfunction ExpenseDate(props) {\r\n    const month = props.date.toLocaleString('en-US', { month: 'long' });\r\n    const day = props.date.toLocaleString('en-US', { day: '2-digit' });\r\n    const year = props.date.getFullYear();\r\n\r\n    return (\r\n    <div className='expense-date'>\r\n        <div className='expense-date__month'>{ month }</div>\r\n        <div className='expense-date__day'>{ day }</div>\r\n        <div className='expense-date__year'>{ year }</div>\r\n    </div>);\r\n}\r\n\r\nexport default ExpenseDate;","import './ExpenseItems.css';\r\nimport './ExpenseDate';\r\nimport ExpenseDate from '../Expenses/ExpenseDate';\r\nimport Card from '../UI/Card';\r\nimport React from 'react';\r\n// import ExpenseAmount from './ExpenseAmount';\r\n\r\n// A component (Custom) in React is Javascript function\r\n// Can only have 1 root element per return statement/snippet\r\n// Can use a div within a div\r\n\r\n// Props - Passing data via properties\r\n\r\nfunction ExpenseItem(props) {\r\n\r\n    return (\r\n    <Card className=\"expense-item\"> \r\n        {/* <ExpenseDate date={props.date}></ExpenseDate> */}\r\n        {/* Can return component like this if you have no content between the tags to enter */}\r\n        <ExpenseDate date={ props.date } />\r\n        <div className=\"expense-item__description\">\r\n            <h2>{ props.title }</h2>\r\n            <div className=\"expense-item__price\">R{ props.amount }</div>\r\n        </div>\r\n    </Card>\r\n);\r\n\r\n}\r\n\r\nexport default ExpenseItem;","import React from \"react\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\n\r\nconst ExpensesList = props => {\r\n\r\n    if (props.item.length === 0) {\r\n        return <h2 className=\"expenses-list__fallback\">Found no expenses.</h2>\r\n    }\r\n\r\n    return (\r\n        <ul className=\"expenses-list\">\r\n            { props.item.map((expense, index) => \r\n                <ExpenseItem key={index} \r\n                             title={expense.title} \r\n                             amount={expense.amount} \r\n                             date={expense.date}/>) }\r\n        </ul>\r\n    )\r\n\r\n}\r\n\r\nexport default ExpensesList;","import React from \"react\";\r\nimport './ChartBar.css';\r\n\r\nconst ChartBar = (props) => {\r\n\r\n    let barFillUp = '0%';\r\n\r\n    if (props.maxValue > 0) {\r\n        barFillUp = Math.round((props.value / props.maxValue) * 100) + '%';\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-bar\">\r\n            <div className=\"chart-bar__inner\">\r\n                <div className=\"chart-bar__fill\" style={{ height: barFillUp }}></div>    \r\n            </div>\r\n            <div className=\"chart-bar__label\">\r\n                {props.label}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChartBar;","import React from \"react\";\r\nimport './Chart.css';\r\nimport ChartBar from './ChartBar.js';\r\n\r\nfunction Chart(props) {\r\n    const dataPointValues = props.dataPoints.map(dataPoint => dataPoint.value);\r\n    const totalMaximum = Math.max(...dataPointValues);\r\n\r\n    return (\r\n        <div className=\"chart\">\r\n            { props.dataPoints.map(dataPoint => \r\n            <ChartBar\r\n            key={dataPoint.label} \r\n            value={dataPoint.value}\r\n            maxValue={totalMaximum}\r\n            label={dataPoint.label} \r\n            />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport Chart from '../Chart/Chart';\r\nimport ChartBar from '../Chart/ChartBar';\r\n\r\nconst ExpensesChart = (props) => {\r\n    const chartDataPoint = [\r\n        { label: 'Jan', value: 0 },\r\n        { label: 'Feb', value: 0 },\r\n        { label: 'Mar', value: 0 },\r\n        { label: 'Apr', value: 0 },\r\n        { label: 'May', value: 0 },\r\n        { label: 'Jun', value: 0 },\r\n        { label: 'Jul', value: 0 },\r\n        { label: 'Aug', value: 0 },\r\n        { label: 'Sep', value: 0 },\r\n        { label: 'Oct', value: 0 },\r\n        { label: 'Nov', value: 0 },\r\n        { label: 'Dec', value: 0 }\r\n    ];\r\n\r\n    for (const expense of props.expenses) {\r\n        const expenseMonth = expense.date.getMonth();\r\n        chartDataPoint[expenseMonth].value += expense.amount;\r\n    }\r\n\r\n    return <Chart dataPoints={chartDataPoint}/>\r\n}\r\n\r\nexport default ExpensesChart;","import React, {useState} from \"react\";\r\nimport Card from \"../UI/Card\";\r\nimport './Expenses.css';\r\nimport ExpensesFilter from \"./ExpenseFilter\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\n\r\nconst Expenses = (props) => {\r\n\r\n    const [filteredYear, setFilteredYear] = useState('2020');\r\n    \r\n    const filteredExpenses = props.item.filter(expense => {\r\n        return expense.date.getFullYear().toString() === filteredYear;\r\n    });\r\n\r\n    const filterChanger = (selectedYear) => {\r\n        setFilteredYear(selectedYear);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className=\"expenses\">\r\n                <ExpensesFilter selectedYear={filteredYear} onChangeFilter={filterChanger}></ExpensesFilter>\r\n                <ExpensesChart expenses = {filteredExpenses}/>\r\n                {/* Add keys when mapping out an item on your list */}\r\n                {/* Conditional listing (Output list depending on a condition) */}\r\n                <ExpensesList item = {filteredExpenses} />\r\n            </Card>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Expenses;","import React, {useState} from \"react\";\r\nimport '../NewExpense/ExpenseForm.css';\r\n\r\nconst ExpenseForm = (props) => {\r\n\r\n    const [enteredTitle, setTitle] = useState('');\r\n    const titleChangeHandler = (event) => {\r\n        setTitle(event.target.value);\r\n    }\r\n\r\n    const [enteredAmount, setAmount] = useState('');\r\n    function amountChangeHandler(event) {\r\n        setAmount(event.target.value);\r\n    }\r\n\r\n    const [enteredDate, setDate] = useState('');\r\n    const dateChangeHandler = (event) => {\r\n        setDate(event.target.value);\r\n    }\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (enteredTitle === \"\") {\r\n            alert('Please enter a title...');\r\n        }\r\n        else if (enteredAmount === \"\") {\r\n            alert('Please enter an amount...');\r\n        }\r\n        else if (enteredDate === \"\") {\r\n            alert('Please enter a date...');\r\n        }\r\n        else {\r\n            const expenseData = {\r\n                title: enteredTitle,\r\n                amount: +enteredAmount,\r\n                date: new Date(enteredDate)\r\n            }\r\n            // Clears user input\r\n            props.onSaveData(expenseData);\r\n            setTitle('');\r\n            setDate('');\r\n            setAmount('');\r\n            console.log(props);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className=\"new-expense__controls\">\r\n                <div className=\"new-expense__control\">\r\n                    <label>Title</label>\r\n                    <input type=\"text\" value={enteredTitle} onChange={titleChangeHandler}/>\r\n                </div>\r\n                <div className=\"new-expense__control\">\r\n                    <label>Amount</label>\r\n                    <input type=\"text\" value={enteredAmount} min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler} />\r\n                </div>\r\n                <div className=\"new-expense__control\">\r\n                    <label>Date</label>\r\n                    <input type=\"date\"value={enteredDate}  min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"new-expense__actions\">\r\n                <button type=\"button\" onClick={props.cancelEditing}>Cancel</button>\r\n\r\n                <button type=\"submit\">Add Expense</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ExpenseForm;","import React, {useState} from \"react\";\r\nimport '../NewExpense/NewExpense.css';\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n\r\n// function newExpense() {}\r\n\r\nconst NewExpense = (props) => {\r\n\r\n    const [currentState, newState] = useState(false);\r\n\r\n    function SaveExpenseData (enteredData) {\r\n        // This pulls out all the data from the props and add in a new ID for the object \r\n        const expenseData = {\r\n            ...enteredData,\r\n            id: Math.random().toString()\r\n        }\r\n        props.expensePointer(expenseData);\r\n        newState(false);\r\n    }\r\n\r\n    const startEditing = () => {\r\n        newState(true);\r\n    }\r\n\r\n    const stopEditing = () => {\r\n        newState(false);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"new-expense\">\r\n            {!currentState && <button onClick={startEditing}>Add New Expense</button>}\r\n            {currentState && <ExpenseForm onSaveData={SaveExpenseData} cancelEditing={stopEditing} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewExpense; ","import React, {useState} from \"react\";\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\n\nconst dummy_data = [\n  // {\n  //   id: \"e1\",\n  //   title: \"Toilet Paper\",\n  //   amount: 94.12,\n  //   date: new Date(2020, 7, 14),\n  // },\n  // {\n  //   id: \"e2\",\n  //   title: \"New TV\",\n  //   amount: 799.49,\n  //   date: new Date(2021, 2, 12),\n  // },\n  // {\n  //   id: \"e3\",\n  //   title: \"Car Insurance\",\n  //   amount: 294.67,\n  //   date: new Date(2021, 2, 28),\n  // },\n  // {\n  //   id: \"e4\",\n  //   title: \"New Desk (Wooden)\",\n  //   amount: 450,\n  //   date: new Date(2021, 5, 12),\n  // },\n  // {\n  //   id: \"e5\",\n  //   title: \"New Laptop\",\n  //   amount: 890,\n  //   date: new Date(2022, 8, 6)\n  // }\n];\n\nfunction App() {\n\n  const [currentExpensesData, newExpensesData] = useState(dummy_data);\n\n  const addExpenseHander = (expense) => {\n    // This updates the list we have dynamically\n    newExpensesData((previousExpenses => {\n      return [expense, ...previousExpenses];\n    }));\n  }\n\n  return (\n    <div>\n      <NewExpense expensePointer={addExpenseHander}/>\n      <Expenses item={currentExpensesData}/>\n    </div>\n  );\n\n  // If we did not use JSX, this is how we would be returning on the App.js, but it is harder to read and implement\n  // return React.createElement(\n  //   'div', \n  //   {}, \n  //   React.createElement('h2', {}, 'Lets get started'), \n  //   React.createElement(Expenses, {item: expenses})\n  // );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n// \n\n// function formatName(user) {\n//     return user.firstName + ' ' + user.lastName;\n// }\n\n// function getGreeting(user) {\n//     if (user) {\n//       return <h1> Hello, {formatName(user)}! </h1>;  \n//     }\n//     return <h1>Hello, Stranger.</h1>;\n// }\n\n// const user = {firstName: 'Thendo', lastName: 'Ramashia'};\n// const element = (<h1> Hello, {getGreeting(user)}! </h1>);\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}